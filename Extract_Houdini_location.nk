set cut_paste_input [stack 0]
version 15.0 v1
push $cut_paste_input
NoOp {
 name Extract_Houdini_location
 label "Click the button to select a file"
 selected true
 xpos 320
 ypos -56
 addUserKnob {20 User}
 addUserKnob {22 file_picker_button l "Select and Apply JSON File" -STARTLINE T "import nuke\nimport json\nimport os\n\ndef create_file_dialog():\n    p = nuke.Panel(\"Choose JSON File Location\")\n    \n    p.addFilenameSearch(\"File Location\", \"\")\n    \n    if p.show():\n        file_location = p.value(\"File Location\")\n        \n        # Call function to apply transformations from JSON\n        apply_json_data(file_location)\n        \n        # Call function to find corresponding ABC file and create ReadGeo node\n        find_and_apply_abc(file_location)\n        \n    else:\n        nuke.message(\"No file location selected.\")\n        return None\n\ndef apply_json_data(json_file_path):\n    try:\n        axis_node = nuke.createNode('Axis3')\n\n        with open(json_file_path) as file:\n            data = json.load(file)\n\n        axis_node\['translate'].setAnimated()\n        axis_node\['rotate'].setAnimated()\n        axis_node\['scaling'].setAnimated()\n\n        for key, transform in data.items():\n            frame = int(key)\n\n            translate = transform\[\"translate\"]\n            rotate = transform\[\"rotate\"]\n            scale = transform\[\"scale\"]\n\n            axis_node\['translate'].setValueAt(translate\[0], frame, 0)  # X\n            axis_node\['translate'].setValueAt(translate\[1], frame, 1)  # Y\n            axis_node\['translate'].setValueAt(translate\[2], frame, 2)  # Z\n\n            axis_node\['rotate'].setValueAt(rotate\[0], frame, 0)  # X\n            axis_node\['rotate'].setValueAt(rotate\[1], frame, 1)  # Y\n            axis_node\['rotate'].setValueAt(rotate\[2], frame, 2)  # Z\n\n            axis_node\['scaling'].setValueAt(scale\[0], frame, 0)  # X\n            axis_node\['scaling'].setValueAt(scale\[1], frame, 1)  # Y\n            axis_node\['scaling'].setValueAt(scale\[2], frame, 2)  # Z\n        \n        nuke.message(\"Transformation successful!\")\n\n    except Exception as e:\n        nuke.message(\"Error loading JSON file: \" + str(e))\n\ndef find_and_apply_abc(json_file_path):\n    try:\n        # Get directory and base filename of the JSON file\n        json_dir = os.path.dirname(json_file_path)\n        json_base = os.path.basename(json_file_path)\n\n        # Find the corresponding .abc file\n        base_name, _ = os.path.splitext(json_base)  # Remove the .json extension\n        abc_filename = f\"Axisfile_\{base_name\}.abc\"  # Construct the corresponding .abc filename\n        abc_file_path = os.path.join(json_dir, abc_filename)\n\n        # Ensure the path uses forward slashes\n        abc_file_path = abc_file_path.replace(\"\\\\\", \"/\")\n\n        if os.path.exists(abc_file_path):\n            # Create a ReadGeo node and set the .abc file path\n            read_geo_node = nuke.createNode('ReadGeo2')\n            read_geo_node\['file'].setValue(abc_file_path)\n            nuke.message(f\".abc file successfully loaded: \{abc_filename\}\")\n        else:\n            nuke.message(f\"No corresponding .abc file found: \{abc_filename\}\")\n\n    except Exception as e:\n        nuke.message(\"Error loading .abc file: \" + str(e))\n\ncreate_file_dialog()\n"}
}
